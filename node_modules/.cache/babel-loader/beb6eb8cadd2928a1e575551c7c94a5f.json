{"ast":null,"code":"var _jsxFileName = \"/Users/vash/Desktop/Pam/CSE316/todohw2/src/App.js\";\nimport React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json';\nimport HomeScreen from './components/home_screen/HomeScreen';\nimport ItemScreen from './components/item_screen/ItemScreen';\nimport ListScreen from './components/list_screen/ListScreen';\nimport jsTPS from './jTPS/src/jtps/jsTPS';\nimport MoveUpTransaction from './jTPS/src/jtps/MoveUp_Transaction';\nimport MoveDownTransaction from './jTPS/src/jtps/MoveDown_Transaction';\nimport ListNameChangeTransaction from './jTPS/src/jtps/ListNameChange_Transaction';\nimport ListOwnerChangeTransaction from './jTPS/src/jtps/ListOwnerChange_Transaction';\nimport ListItemRemovalTransaction from './jTPS/src/jtps/ListItemRemoval_Transaction';\nimport ListItemEditTransaction from './jTPS/src/jtps/ListItemEdit_Transaction';\nimport ListSortingTransaction from './jTPS/src/jtps/ListSorting_Transaction';\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\"\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.tps = new jsTPS();\n    this.state = {\n      currentScreen: AppScreen.HOME_SCREEN,\n      todoLists: testTodoListData.todoLists,\n      currentList: null,\n      todoItem: null,\n      isEditingItem: false,\n      sortingCriteria: null\n    };\n\n    this.addMoveUpTransaction = (list, item) => {\n      this.tps.addTransaction(new MoveUpTransaction(list, item));\n    };\n\n    this.addMoveDownTransaction = (list, item) => {\n      this.tps.addTransaction(new MoveDownTransaction(list, item));\n    };\n\n    this.addNameChangeTransaction = (list, newName) => {\n      this.tps.addTransaction(new ListNameChangeTransaction(list, newName));\n    };\n\n    this.addOwnerChangeTransaction = (list, newOwner) => {\n      this.tps.addTransaction(new ListOwnerChangeTransaction(list, newOwner));\n    };\n\n    this.addListItemRemovalTransaction = (list, item, index) => {\n      this.tps.addTransaction(new ListItemRemovalTransaction(list, item, index));\n    };\n\n    this.addItemEditTransaction = (list, currentItem, editOrNewItem, isEditingItem) => {\n      this.tps.addTransaction(new ListItemEditTransaction(list, currentItem, editOrNewItem, isEditingItem));\n    };\n\n    this.addListSortingTransaction = (list, sortingCriteria) => {\n      this.tps.addTransaction(new ListSortingTransaction(list, sortingCriteria));\n    };\n\n    this.goHome = () => {\n      this.setState({\n        currentScreen: AppScreen.HOME_SCREEN\n      });\n      this.setState({\n        currentList: null\n      });\n    };\n\n    this.goItem = () => {\n      this.setState({\n        currentScreen: AppScreen.ITEM_SCREEN\n      });\n    };\n\n    this.cancelItemChanges = () => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        todoItem: null\n      });\n      this.setState({\n        isEditingItem: false\n      });\n    };\n\n    this.loadList = todoListToLoad => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        currentList: todoListToLoad\n      });\n      console.log(\"currentList: \" + this.state.currentList);\n      console.log(\"currentScreen: \" + this.state.currentScreen);\n    };\n\n    this.editItem = currentItem => {\n      this.setState({\n        isEditingItem: true\n      });\n      this.setState({\n        todoItem: currentItem\n      });\n      this.setState({\n        currentScreen: AppScreen.ITEM_SCREEN\n      });\n    };\n\n    this.addItem = () => {\n      let temp = {\n        description: document.getElementById(\"item_description_textfield\").value,\n        assigned_to: document.getElementById(\"item_assigned_to_textfield\").value,\n        due_date: document.getElementById(\"item_due_date_picker\").value,\n        completed: document.getElementById(\"item_completed_checkbox\").checked\n      };\n      if (temp.description === \"\") temp.description = \"Unknown\";\n      if (temp.assigned_to === \"\") temp.assigned_to = \"Unknown\";\n      this.addItemEditTransaction(this.state.currentList, this.state.todoItem, temp, this.state.isEditingItem);\n      this.loadList(this.state.currentList);\n      this.setState({\n        todoItem: null\n      });\n      this.setState({\n        isEditingItem: false\n      }); // if (this.state.isEditingItem === false) {\n      // const newItem = {\n      //   key: this.state.currentList.items.length,\n      //   description: document.getElementById(\"item_description_textfield\").value,\n      //   assigned_to: document.getElementById(\"item_assigned_to_textfield\").value,\n      //   due_date: document.getElementById(\"item_due_date_picker\").value,\n      //   completed: document.getElementById(\"item_completed_checkbox\").checked,\n      // // }\n      // if (newItem.description === \"\")\n      //   newItem.description = \"Unknown\";\n      // if (newItem.assigned_to === \"\")\n      //   newItem.assigned_to = \"Unknown\";\n      // this.state.currentList.items.push(newItem);\n      //}\n      // else {\n      //   let temp = this.state.todoItem;\n      //   if (temp.description !== document.getElementById(\"item_description_textfield\").value) {\n      //     if (document.getElementById(\"item_description_textfield\").value === \"\") {\n      //       temp.description = \"Unknown\";\n      //     }\n      //     else \n      //       temp.description = document.getElementById(\"item_description_textfield\").value;\n      //   }\n      //   if (temp.assigned_to !== document.getElementById(\"item_assigned_to_textfield\").value) {\n      //     if (document.getElementById(\"item_assigned_to_textfield\").value === \"\") {\n      //       temp.assigned_to = \"Unknown\";\n      //     }\n      //     else \n      //       temp.assigned_to = document.getElementById(\"item_assigned_to_textfield\").value;\n      //   }\n      //   if (temp.due_date !== document.getElementById(\"item_due_date_picker\").value) {\n      //     temp.due_date = document.getElementById(\"item_due_date_picker\").value;\n      //   }\n      //   if (temp.completed !== document.getElementById(\"item_completed_checkbox\").checked)\n      //     temp.completed = document.getElementById(\"item_completed_checkbox\").checked;\n      //   this.setState({todoItem: temp});\n      //   this.setState({currentScreen: AppScreen.ITEM_SCREEN});\n      //}\n    };\n\n    this.addList = () => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      const newList = {\n        key: this.state.todoLists.length,\n        name: \"Unknown\",\n        owner: \"Unknown\",\n        items: []\n      };\n      this.setState({\n        todoLists: [...this.state.todoLists, newList]\n      });\n      this.setState({\n        currentList: newList\n      });\n      this.loadList(newList);\n    };\n\n    this.showDialog = () => {\n      document.getElementById(\"modal_content\").setAttribute(\"class\", \"slide_in\");\n      document.getElementById(\"modal_yes_no_dialog\").classList.add(\"is_visible\");\n    };\n\n    this.hideDialog = () => {\n      document.getElementById(\"modal_content\").setAttribute(\"class\", \"slide_out\");\n      setTimeout(function () {\n        document.getElementById(\"modal_yes_no_dialog\").classList.remove(\"is_visible\");\n      }, 1500);\n    };\n\n    this.deleteList = () => {\n      const index = this.state.todoLists.indexOf(this.state.currentList);\n      this.state.todoLists.splice(index, 1);\n      this.loadList();\n      this.goHome();\n    };\n\n    this.processSortItemsByTask = () => {\n      // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n      if (this.state.sortingCriteria === \"SORT_BY_TASK_INCREASING\") {\n        this.setState({\n          sortingCriteria: \"SORT_BY_TASK_DECREASING\"\n        });\n        this.sortTasks(\"SORT_BY_TASK_DECREASING\");\n      } // ALL OTHER CASES SORT BY INCREASING\n      else {\n          this.setState({\n            sortingCriteria: \"SORT_BY_TASK_INCREASING\"\n          });\n          this.sortTasks();\n        }\n    };\n\n    this.processSortItemsByDueDate = () => {\n      // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n      if (this.state.sortingCriteria === \"SORT_BY_DUE_DATE_INCREASING\") {\n        this.setState({\n          sortingCriteria: \"SORT_BY_DUE_DATE_DECREASING\"\n        });\n        this.sortTasks();\n      } // ALL OTHER CASES SORT BY INCREASING\n      else {\n          this.setState({\n            sortingCriteria: \"SORT_BY_DUE_DATE_INCREASING\"\n          });\n          this.sortTasks();\n        }\n    };\n\n    this.processSortItemsByStatus = () => {\n      // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n      if (this.state.sortingCriteria === \"SORT_BY_STATUS_INCREASING\") {\n        this.setState({\n          sortingCriteria: \"SORT_BY_STATUS_DECREASING\"\n        });\n        this.sortTasks();\n      } // ALL OTHER CASES SORT BY INCREASING\n      else {\n          this.setState({\n            sortingCriteria: \"SORT_BY_STATUS_INCREASING\"\n          });\n          this.sortTasks();\n        }\n    };\n\n    this.sortTasks = () => {\n      //this.setState( {sortingCriteria: criteria} );\n      this.addListSortingTransaction(this.state.currentList, this.state.sortingCriteria); //this.state.currentList.items.sort(this.compare);\n\n      this.loadList(this.state.currentList);\n    };\n\n    this.handleKeyPress = e => {\n      if (this.state.currentScreen === AppScreen.LIST_SCREEN) {\n        let button = String.fromCharCode(e.which).toLowerCase();\n\n        if (e.ctrlKey && button === 'z') {\n          this.tps.undoTransaction();\n          this.setState({\n            currentScreen: AppScreen.LIST_SCREEN\n          });\n        } else if (e.ctrlKey && button === 'y') {\n          this.tps.doTransaction();\n          this.setState({\n            currentScreen: AppScreen.LIST_SCREEN\n          });\n        }\n      }\n    };\n  }\n\n  render() {\n    document.addEventListener('keydown', this.handleKeyPress);\n\n    switch (this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return React.createElement(HomeScreen, {\n          loadList: this.loadList.bind(this),\n          todoLists: this.state.todoLists,\n          addList: this.addList,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273\n          },\n          __self: this\n        });\n\n      case AppScreen.LIST_SCREEN:\n        return React.createElement(ListScreen, {\n          goHome: this.goHome.bind(this),\n          todoList: this.state.currentList,\n          loadList: this.loadList,\n          showDialog: this.showDialog,\n          deleteList: this.deleteList,\n          hideDialog: this.hideDialog,\n          addList: this.addList,\n          editItem: this.editItem,\n          goItem: this.goItem,\n          processSortItemsByTask: this.processSortItemsByTask,\n          processSortItemsByStatus: this.processSortItemsByStatus,\n          processSortItemsByDueDate: this.processSortItemsByDueDate,\n          addMoveUpTransaction: this.addMoveUpTransaction,\n          addMoveDownTransaction: this.addMoveDownTransaction,\n          addNameChangeTransaction: this.addNameChangeTransaction,\n          addOwnerChangeTransaction: this.addOwnerChangeTransaction,\n          addListItemRemovalTransaction: this.addListItemRemovalTransaction,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278\n          },\n          __self: this\n        });\n\n      case AppScreen.ITEM_SCREEN:\n        return React.createElement(ItemScreen //currentScreen={AppScreen.ITEM_SCREEN}\n        , {\n          todoItem: this.state.todoItem,\n          addItem: this.addItem,\n          cancelItemChanges: this.cancelItemChanges,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 304\n          },\n          __self: this\n        }, \"ERROR\");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vash/Desktop/Pam/CSE316/todohw2/src/App.js"],"names":["React","Component","testTodoListData","HomeScreen","ItemScreen","ListScreen","jsTPS","MoveUpTransaction","MoveDownTransaction","ListNameChangeTransaction","ListOwnerChangeTransaction","ListItemRemovalTransaction","ListItemEditTransaction","ListSortingTransaction","AppScreen","HOME_SCREEN","LIST_SCREEN","ITEM_SCREEN","App","tps","state","currentScreen","todoLists","currentList","todoItem","isEditingItem","sortingCriteria","addMoveUpTransaction","list","item","addTransaction","addMoveDownTransaction","addNameChangeTransaction","newName","addOwnerChangeTransaction","newOwner","addListItemRemovalTransaction","index","addItemEditTransaction","currentItem","editOrNewItem","addListSortingTransaction","goHome","setState","goItem","cancelItemChanges","loadList","todoListToLoad","console","log","editItem","addItem","temp","description","document","getElementById","value","assigned_to","due_date","completed","checked","addList","newList","key","length","name","owner","items","showDialog","setAttribute","classList","add","hideDialog","setTimeout","remove","deleteList","indexOf","splice","processSortItemsByTask","sortTasks","processSortItemsByDueDate","processSortItemsByStatus","handleKeyPress","e","button","String","fromCharCode","which","toLowerCase","ctrlKey","undoTransaction","doTransaction","render","addEventListener","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json'\nimport HomeScreen from './components/home_screen/HomeScreen'\nimport ItemScreen from './components/item_screen/ItemScreen'\nimport ListScreen from './components/list_screen/ListScreen'\nimport jsTPS from './jTPS/src/jtps/jsTPS'\nimport MoveUpTransaction from './jTPS/src/jtps/MoveUp_Transaction'\nimport MoveDownTransaction from './jTPS/src/jtps/MoveDown_Transaction'\nimport ListNameChangeTransaction from './jTPS/src/jtps/ListNameChange_Transaction'\nimport ListOwnerChangeTransaction from './jTPS/src/jtps/ListOwnerChange_Transaction'\nimport ListItemRemovalTransaction from './jTPS/src/jtps/ListItemRemoval_Transaction'\nimport ListItemEditTransaction from './jTPS/src/jtps/ListItemEdit_Transaction'\nimport ListSortingTransaction from './jTPS/src/jtps/ListSorting_Transaction'\n\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\"\n}\n\nclass App extends Component {\n  tps = new jsTPS();\n  state = {\n    currentScreen: AppScreen.HOME_SCREEN,\n    todoLists: testTodoListData.todoLists,\n    currentList: null,\n    todoItem: null,\n    isEditingItem: false,\n    sortingCriteria: null,\n  }\n\n  addMoveUpTransaction = (list, item) => {\n    this.tps.addTransaction(new MoveUpTransaction(list, item));\n  }\n\n  addMoveDownTransaction = (list, item) => {\n    this.tps.addTransaction(new MoveDownTransaction(list, item));\n  }\n\n  addNameChangeTransaction = (list, newName) => {\n    this.tps.addTransaction(new ListNameChangeTransaction(list, newName));\n  }\n\n  addOwnerChangeTransaction = (list, newOwner) => {\n    this.tps.addTransaction(new ListOwnerChangeTransaction(list, newOwner));\n  }\n\n  addListItemRemovalTransaction = (list, item, index) => {\n    this.tps.addTransaction(new ListItemRemovalTransaction(list, item, index));\n  }\n  \n  addItemEditTransaction = (list, currentItem, editOrNewItem, isEditingItem) => {\n    this.tps.addTransaction(new ListItemEditTransaction(list, currentItem, editOrNewItem, isEditingItem));\n  }\n\n  addListSortingTransaction = (list, sortingCriteria) => {\n    this.tps.addTransaction(new ListSortingTransaction(list, sortingCriteria));\n  }\n\n  goHome = () => {\n    this.setState({currentScreen: AppScreen.HOME_SCREEN});\n    this.setState({currentList: null});\n  }\n\n  goItem = () => {\n    this.setState( {currentScreen: AppScreen.ITEM_SCREEN});\n  }\n\n  cancelItemChanges = () => {\n    this.setState( {currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({todoItem: null});\n    this.setState({isEditingItem: false});\n  }\n  loadList = (todoListToLoad) => {\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({currentList: todoListToLoad});\n    console.log(\"currentList: \" + this.state.currentList);\n    console.log(\"currentScreen: \" + this.state.currentScreen);\n  }\n  \n  editItem = (currentItem) => {\n    this.setState({isEditingItem: true});\n    this.setState({todoItem:currentItem});\n    this.setState({currentScreen: AppScreen.ITEM_SCREEN});\n  }\n  addItem = () => {\n    let temp = {\n      description: document.getElementById(\"item_description_textfield\").value,\n      assigned_to: document.getElementById(\"item_assigned_to_textfield\").value,\n      due_date: document.getElementById(\"item_due_date_picker\").value,\n      completed: document.getElementById(\"item_completed_checkbox\").checked,\n    }\n    if (temp.description === \"\")\n      temp.description = \"Unknown\";\n    if (temp.assigned_to === \"\")\n      temp.assigned_to = \"Unknown\";\n    this.addItemEditTransaction(this.state.currentList, this.state.todoItem, temp, this.state.isEditingItem);\n\n    this.loadList(this.state.currentList);\n    this.setState({todoItem: null});\n    this.setState({isEditingItem:false});\n    // if (this.state.isEditingItem === false) {\n      // const newItem = {\n      //   key: this.state.currentList.items.length,\n      //   description: document.getElementById(\"item_description_textfield\").value,\n      //   assigned_to: document.getElementById(\"item_assigned_to_textfield\").value,\n      //   due_date: document.getElementById(\"item_due_date_picker\").value,\n      //   completed: document.getElementById(\"item_completed_checkbox\").checked,\n      // // }\n      // if (newItem.description === \"\")\n      //   newItem.description = \"Unknown\";\n      // if (newItem.assigned_to === \"\")\n      //   newItem.assigned_to = \"Unknown\";\n      // this.state.currentList.items.push(newItem);\n    //}\n    // else {\n    //   let temp = this.state.todoItem;\n    //   if (temp.description !== document.getElementById(\"item_description_textfield\").value) {\n    //     if (document.getElementById(\"item_description_textfield\").value === \"\") {\n    //       temp.description = \"Unknown\";\n    //     }\n    //     else \n    //       temp.description = document.getElementById(\"item_description_textfield\").value;\n    //   }\n    //   if (temp.assigned_to !== document.getElementById(\"item_assigned_to_textfield\").value) {\n    //     if (document.getElementById(\"item_assigned_to_textfield\").value === \"\") {\n    //       temp.assigned_to = \"Unknown\";\n    //     }\n    //     else \n    //       temp.assigned_to = document.getElementById(\"item_assigned_to_textfield\").value;\n    //   }\n    //   if (temp.due_date !== document.getElementById(\"item_due_date_picker\").value) {\n    //     temp.due_date = document.getElementById(\"item_due_date_picker\").value;\n    //   }\n    //   if (temp.completed !== document.getElementById(\"item_completed_checkbox\").checked)\n    //     temp.completed = document.getElementById(\"item_completed_checkbox\").checked;\n\n    //   this.setState({todoItem: temp});\n    //   this.setState({currentScreen: AppScreen.ITEM_SCREEN});\n    //}\n  }\n  addList = () => {\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    const newList = {\n      key: this.state.todoLists.length,\n      name: \"Unknown\",\n      owner: \"Unknown\",\n      items: []\n    }\n    this.setState( { todoLists: [...this.state.todoLists, newList]});\n    this.setState( {currentList: newList});\n    this.loadList(newList);\n  }\n\n  showDialog = () => {\n    document.getElementById(\"modal_content\").setAttribute(\"class\",\"slide_in\");\n    document.getElementById(\"modal_yes_no_dialog\").classList.add(\"is_visible\");\n  }\n\n  hideDialog = () => {\n    document.getElementById(\"modal_content\").setAttribute(\"class\", \"slide_out\");\n    setTimeout(function() {\n        document.getElementById(\"modal_yes_no_dialog\").classList.remove(\"is_visible\");\n    },1500)\n  }\n\n  deleteList = () => {\n    const index = this.state.todoLists.indexOf(this.state.currentList);\n    this.state.todoLists.splice(index, 1);\n    this.loadList();\n    this.goHome();\n  }\n\n  processSortItemsByTask = () => {\n    // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n    if (this.state.sortingCriteria === \"SORT_BY_TASK_INCREASING\") {\n        this.setState( {sortingCriteria: \"SORT_BY_TASK_DECREASING\"} );\n        this.sortTasks(\"SORT_BY_TASK_DECREASING\");\n    }\n    // ALL OTHER CASES SORT BY INCREASING\n    else {\n      this.setState( {sortingCriteria: \"SORT_BY_TASK_INCREASING\"} );\n      this.sortTasks();\n    }\n  }\n  processSortItemsByDueDate = () => {\n    // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n    if (this.state.sortingCriteria === \"SORT_BY_DUE_DATE_INCREASING\") {\n        this.setState( {sortingCriteria: \"SORT_BY_DUE_DATE_DECREASING\"} );\n        this.sortTasks();\n    }\n    // ALL OTHER CASES SORT BY INCREASING\n    else {\n      this.setState( {sortingCriteria: \"SORT_BY_DUE_DATE_INCREASING\"} );\n      this.sortTasks();\n    }\n  }\n  processSortItemsByStatus = () =>  {\n    // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n    if (this.state.sortingCriteria === \"SORT_BY_STATUS_INCREASING\") {\n        this.setState( {sortingCriteria: \"SORT_BY_STATUS_DECREASING\"} );\n        this.sortTasks();\n    }\n    // ALL OTHER CASES SORT BY INCREASING\n    else {\n      this.setState( {sortingCriteria: \"SORT_BY_STATUS_INCREASING\"} );\n      this.sortTasks();\n    }\n  }\n  sortTasks = () => {\n      //this.setState( {sortingCriteria: criteria} );\n      this.addListSortingTransaction(this.state.currentList, this.state.sortingCriteria);\n      //this.state.currentList.items.sort(this.compare);\n      this.loadList(this.state.currentList);\n  }\n  // compare = (item1, item2) => {\n  //   // IF IT'S A DECREASING CRITERIA SWAP THE ITEMS\n  //   if (this.state.sortingCriteria===\"SORT_BY_TASK_DECREASING\"\n  //       || this.sortingCriteria === \"SORT_BY_STATUS_DECREASING\"\n  //       || this.state.sortingCriteria===\"SORT_BY_DUE_DATE_DECREASING\") {\n  //       let temp = item1;\n  //       item1 = item2;\n  //       item2 = temp;\n  //   }\n  //   // SORT BY ITEM DESCRIPTION\n  //   if (this.state.sortingCriteria===\"SORT_BY_TASK_INCREASING\"\n  //       || this.state.sortingCriteria===\"SORT_BY_TASK_DECREASING\") {\n  //       if (item1.description < item2.description)\n  //           return -1;\n  //       else if (item1.description > item2.description)\n  //           return 1;\n  //       else\n  //           return 0;\n  //   }\n  //   // SORT BY DUE DATE\n  //   else if (this.state.sortingCriteria===\"SORT_BY_DUE_DATE_INCREASING\"\n  //             || this.state.sortingCriteria===\"SORT_BY_DUE_DATE_DECREASING\") {\n  //     if (item1.due_date < item2.due_date)\n  //       return -1;\n  //     else if (item1.due_date > item2.due_date)\n  //       return 1;\n  //     else\n  //       return 0;\n  //   }\n  //   // SORT BY COMPLETED\n  //   else {\n  //     if (item1.completed < item2.completed)\n  //       return -1;\n  //     else if (item1.completed > item2.completed)\n  //       return 1;\n  //     else\n  //       return 0;\n  //   }\n  // }\n\n  handleKeyPress = (e) => {\n    if (this.state.currentScreen === AppScreen.LIST_SCREEN) {\n      let button = String.fromCharCode(e.which).toLowerCase();\n      if (e.ctrlKey && button === 'z') {\n        this.tps.undoTransaction();\n        this.setState({currentScreen: AppScreen.LIST_SCREEN});\n      }\n      else if (e.ctrlKey && button === 'y') {\n        this.tps.doTransaction();\n        this.setState({currentScreen: AppScreen.LIST_SCREEN});\n      }\n    }\n  }\n  render() {\n    document.addEventListener('keydown', this.handleKeyPress);\n    switch(this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return <HomeScreen \n        loadList={this.loadList.bind(this)} \n        todoLists={this.state.todoLists} \n        addList={this.addList}/>;\n      case AppScreen.LIST_SCREEN:            \n        return <ListScreen\n          goHome={this.goHome.bind(this)}\n          todoList={this.state.currentList}\n          loadList={this.loadList} \n          showDialog={this.showDialog}\n          deleteList={this.deleteList}\n          hideDialog={this.hideDialog}\n          addList={this.addList}\n          editItem={this.editItem}\n          goItem={this.goItem}\n          processSortItemsByTask={this.processSortItemsByTask}\n          processSortItemsByStatus={this.processSortItemsByStatus}\n          processSortItemsByDueDate={this.processSortItemsByDueDate}\n          addMoveUpTransaction={this.addMoveUpTransaction}\n          addMoveDownTransaction={this.addMoveDownTransaction}\n          addNameChangeTransaction={this.addNameChangeTransaction}\n          addOwnerChangeTransaction={this.addOwnerChangeTransaction}\n          addListItemRemovalTransaction={this.addListItemRemovalTransaction}/>;\n      case AppScreen.ITEM_SCREEN:\n        return <ItemScreen \n        //currentScreen={AppScreen.ITEM_SCREEN}\n        todoItem={this.state.todoItem}\n        addItem={this.addItem}\n        cancelItemChanges={this.cancelItemChanges}\n        />;\n      default:\n        return <div>ERROR</div>;\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}