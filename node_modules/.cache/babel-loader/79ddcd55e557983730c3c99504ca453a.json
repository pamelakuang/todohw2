{"ast":null,"code":"class ListSorting_Transaction {\n  //afterSortList = null;\n  constructor(list, sortCriteria) {\n    this.currentList = null;\n    this.items = [];\n    this.sortingCriteria = null;\n\n    this.doTransaction = () => {\n      // sort\n      this.currentList.items.sort(this.compare);\n    };\n\n    this.undoTransaction = () => {\n      this.currentList.items = [...this.items];\n    };\n\n    this.currentList = list;\n    this.items = this.currentList.items.slice();\n    this.sortingCriteria = sortCriteria;\n  }\n\n  compare(item1, item2) {\n    // IF IT'S A DECREASING CRITERIA SWAP THE ITEMS\n    if (this.sortingCriteria === \"SORT_BY_TASK_DECREASING\" || this.sortingCriteria === \"SORT_BY_STATUS_DECREASING\" || this.sortingCriteria === \"SORT_BY_DUE_DATE_DECREASING\") {\n      let temp = item1;\n      item1 = item2;\n      item2 = temp;\n    } // SORT BY ITEM DESCRIPTION\n\n\n    if (this.sortingCriteria === \"SORT_BY_TASK_INCREASING\" || this.sortingCriteria === \"SORT_BY_TASK_DECREASING\") {\n      if (item1.description < item2.description) return -1;else if (item1.description > item2.description) return 1;else return 0;\n    }\n\n    if (thisModel.isCurrentItemSortCriteria(\"SORT_BY_DUE_DATE_DECREASING\") || thisModel.isCurrentItemSortCriteria(\"SORT_BY_DUE_DATE_INCREASING\")) {\n      if (item1.getDueDate() < item2.getDueDate()) return -1;else if (item1.getDueDate() > item2.getDueDate()) return 1;else return 0;\n    } // SORT BY COMPLETED\n    else {\n        if (item1.isCompleted() < item2.isCompleted()) return -1;else if (item1.isCompleted() > item2.isCompleted()) return 1;else return 0;\n      }\n  }\n\n}\n\nexport default ListSorting_Transaction;","map":{"version":3,"sources":["/Users/vash/Desktop/Pam/CSE316/todohw2/src/jTPS/src/jtps/ListSorting_Transaction.js"],"names":["ListSorting_Transaction","constructor","list","sortCriteria","currentList","items","sortingCriteria","doTransaction","sort","compare","undoTransaction","slice","item1","item2","temp","description","thisModel","isCurrentItemSortCriteria","getDueDate","isCompleted"],"mappings":"AAAA,MAAMA,uBAAN,CAA8B;AAG1B;AAGAC,EAAAA,WAAW,CAACC,IAAD,EAAOC,YAAP,EAAqB;AAAA,SAJhCC,WAIgC,GAJlB,IAIkB;AAAA,SAFhCC,KAEgC,GAFxB,EAEwB;AAAA,SADhCC,eACgC,GADd,IACc;;AAAA,SA4ChCC,aA5CgC,GA4ChB,MAAM;AAClB;AACA,WAAKH,WAAL,CAAiBC,KAAjB,CAAuBG,IAAvB,CAA4B,KAAKC,OAAjC;AACH,KA/C+B;;AAAA,SAiDhCC,eAjDgC,GAiDd,MAAM;AACpB,WAAKN,WAAL,CAAiBC,KAAjB,GAAyB,CAAC,GAAG,KAAKA,KAAT,CAAzB;AACH,KAnD+B;;AAC5B,SAAKD,WAAL,GAAmBF,IAAnB;AACA,SAAKG,KAAL,GAAa,KAAKD,WAAL,CAAiBC,KAAjB,CAAuBM,KAAvB,EAAb;AACA,SAAKL,eAAL,GAAuBH,YAAvB;AACH;;AAEDM,EAAAA,OAAO,CAACG,KAAD,EAAQC,KAAR,EAAe;AAClB;AACA,QAAI,KAAKP,eAAL,KAAyB,yBAAzB,IACG,KAAKA,eAAL,KAAyB,2BAD5B,IAEG,KAAKA,eAAL,KAAyB,6BAFhC,EAE+D;AAC3D,UAAIQ,IAAI,GAAGF,KAAX;AACAA,MAAAA,KAAK,GAAGC,KAAR;AACAA,MAAAA,KAAK,GAAGC,IAAR;AACH,KARiB,CASlB;;;AACA,QAAI,KAAKR,eAAL,KAAyB,yBAAzB,IACG,KAAKA,eAAL,KAAyB,yBADhC,EAC2D;AACvD,UAAIM,KAAK,CAACG,WAAN,GAAoBF,KAAK,CAACE,WAA9B,EACI,OAAO,CAAC,CAAR,CADJ,KAEK,IAAIH,KAAK,CAACG,WAAN,GAAoBF,KAAK,CAACE,WAA9B,EACD,OAAO,CAAP,CADC,KAGD,OAAO,CAAP;AACP;;AACD,QAAIC,SAAS,CAACC,yBAAV,CAAoC,6BAApC,KACGD,SAAS,CAACC,yBAAV,CAAoC,6BAApC,CADP,EAC2E;AACvE,UAAIL,KAAK,CAACM,UAAN,KAAqBL,KAAK,CAACK,UAAN,EAAzB,EACI,OAAO,CAAC,CAAR,CADJ,KAEK,IAAIN,KAAK,CAACM,UAAN,KAAqBL,KAAK,CAACK,UAAN,EAAzB,EACD,OAAO,CAAP,CADC,KAGD,OAAO,CAAP;AACP,KARD,CASA;AATA,SAUK;AACD,YAAIN,KAAK,CAACO,WAAN,KAAsBN,KAAK,CAACM,WAAN,EAA1B,EACI,OAAO,CAAC,CAAR,CADJ,KAEK,IAAIP,KAAK,CAACO,WAAN,KAAsBN,KAAK,CAACM,WAAN,EAA1B,EACD,OAAO,CAAP,CADC,KAGD,OAAO,CAAP;AACP;AACJ;;AAjDyB;;AA4D9B,eAAenB,uBAAf","sourcesContent":["class ListSorting_Transaction {\n\n    currentList = null;\n    //afterSortList = null;\n    items = [];\n    sortingCriteria = null;\n    constructor(list, sortCriteria) {\n        this.currentList = list;\n        this.items = this.currentList.items.slice();\n        this.sortingCriteria = sortCriteria;\n    }\n\n    compare(item1, item2) {\n        // IF IT'S A DECREASING CRITERIA SWAP THE ITEMS\n        if (this.sortingCriteria === \"SORT_BY_TASK_DECREASING\"\n            || this.sortingCriteria === \"SORT_BY_STATUS_DECREASING\"\n            || this.sortingCriteria === \"SORT_BY_DUE_DATE_DECREASING\") {\n            let temp = item1;\n            item1 = item2;\n            item2 = temp;\n        }\n        // SORT BY ITEM DESCRIPTION\n        if (this.sortingCriteria === \"SORT_BY_TASK_INCREASING\"\n            || this.sortingCriteria === \"SORT_BY_TASK_DECREASING\") {\n            if (item1.description < item2.description)\n                return -1;\n            else if (item1.description > item2.description)\n                return 1;\n            else\n                return 0;\n        }\n        if (thisModel.isCurrentItemSortCriteria(\"SORT_BY_DUE_DATE_DECREASING\")\n            || thisModel.isCurrentItemSortCriteria(\"SORT_BY_DUE_DATE_INCREASING\")) {\n            if (item1.getDueDate() < item2.getDueDate())\n                return -1;\n            else if (item1.getDueDate() > item2.getDueDate())\n                return 1;\n            else\n                return 0;\n        }\n        // SORT BY COMPLETED\n        else {\n            if (item1.isCompleted() < item2.isCompleted())\n                return -1;\n            else if (item1.isCompleted() > item2.isCompleted())\n                return 1;\n            else\n                return 0;\n        }\n    }\n    doTransaction = () => {\n        // sort\n        this.currentList.items.sort(this.compare);\n    }\n\n    undoTransaction = () => {\n        this.currentList.items = [...this.items];\n    }\n\n}\nexport default ListSorting_Transaction"]},"metadata":{},"sourceType":"module"}