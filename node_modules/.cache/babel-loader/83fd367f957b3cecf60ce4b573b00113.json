{"ast":null,"code":"var _jsxFileName = \"/Users/vash/Desktop/Pam/CSE316/todo_hw2/src/App.js\";\nimport React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json';\nimport HomeScreen from './components/home_screen/HomeScreen';\nimport ItemScreen from './components/item_screen/ItemScreen';\nimport ListScreen from './components/list_screen/ListScreen';\nimport jsTPS from './jTPS/src/jtps/jsTPS';\nimport MoveUpTransaction from './jTPS/src/jtps/MoveUp_Transaction';\nimport MoveDownTransaction from './jTPS/src/jtps/MoveDown_Transaction';\nimport ListNameChangeTransaction from './jTPS/src/jtps/ListNameChange_Transaction';\nimport ListOwnerChangeTransaction from './jTPS/src/jtps/ListOwnerChange_Transaction';\nimport ListItemRemovalTransaction from './jTPS/src/jtps/ListItemRemoval_Transaction';\nimport ListItemEditTransaction from './jTPS/src/jtps/ListItemEdit_Transaction';\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\"\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentScreen: AppScreen.HOME_SCREEN,\n      todoLists: testTodoListData.todoLists,\n      currentList: null,\n      todoItem: null,\n      isEditingItem: false,\n      sortingCriteria: null\n    };\n\n    this.goHome = () => {\n      this.setState({\n        currentScreen: AppScreen.HOME_SCREEN\n      });\n      this.setState({\n        currentList: null\n      });\n    };\n\n    this.goItem = () => {\n      this.setState({\n        currentScreen: AppScreen.ITEM_SCREEN\n      });\n    };\n\n    this.cancelItemChanges = () => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        todoItem: null\n      });\n      this.setState({\n        isEditingItem: false\n      });\n    };\n\n    this.loadList = todoListToLoad => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      this.setState({\n        currentList: todoListToLoad\n      });\n      console.log(\"currentList: \" + this.state.currentList);\n      console.log(\"currentScreen: \" + this.state.currentScreen);\n    };\n\n    this.editItem = currentItem => {\n      this.setState({\n        isEditingItem: true\n      });\n      this.setState({\n        todoItem: currentItem\n      });\n      this.setState({\n        currentScreen: AppScreen.ITEM_SCREEN\n      });\n    };\n\n    this.addItem = () => {\n      let temp = {\n        description: document.getElementById(\"item_description_textfield\").value,\n        assigned_to: document.getElementById(\"item_assigned_to_textfield\").value,\n        due_date: document.getElementById(\"item_due_date_picker\").value,\n        completed: document.getElementById(\"item_completed_checkbox\").checked\n      };\n      if (temp.description === \"\") temp.description = \"Unknown\";\n      if (temp.assigned_to === \"\") temp.assigned_to = \"Unknown\";\n      this.addItemEditTransaction(this.state.currentList, this.state.todoItem, temp, this.state.isEditingItem);\n      this.loadList(this.state.currentList);\n      this.setState({\n        todoItem: null\n      });\n      this.setState({\n        isEditingItem: false\n      }); // if (this.state.isEditingItem === false) {\n      // const newItem = {\n      //   key: this.state.currentList.items.length,\n      //   description: document.getElementById(\"item_description_textfield\").value,\n      //   assigned_to: document.getElementById(\"item_assigned_to_textfield\").value,\n      //   due_date: document.getElementById(\"item_due_date_picker\").value,\n      //   completed: document.getElementById(\"item_completed_checkbox\").checked,\n      // // }\n      // if (newItem.description === \"\")\n      //   newItem.description = \"Unknown\";\n      // if (newItem.assigned_to === \"\")\n      //   newItem.assigned_to = \"Unknown\";\n      // this.state.currentList.items.push(newItem);\n      //}\n      // else {\n      //   let temp = this.state.todoItem;\n      //   if (temp.description !== document.getElementById(\"item_description_textfield\").value) {\n      //     if (document.getElementById(\"item_description_textfield\").value === \"\") {\n      //       temp.description = \"Unknown\";\n      //     }\n      //     else \n      //       temp.description = document.getElementById(\"item_description_textfield\").value;\n      //   }\n      //   if (temp.assigned_to !== document.getElementById(\"item_assigned_to_textfield\").value) {\n      //     if (document.getElementById(\"item_assigned_to_textfield\").value === \"\") {\n      //       temp.assigned_to = \"Unknown\";\n      //     }\n      //     else \n      //       temp.assigned_to = document.getElementById(\"item_assigned_to_textfield\").value;\n      //   }\n      //   if (temp.due_date !== document.getElementById(\"item_due_date_picker\").value) {\n      //     temp.due_date = document.getElementById(\"item_due_date_picker\").value;\n      //   }\n      //   if (temp.completed !== document.getElementById(\"item_completed_checkbox\").checked)\n      //     temp.completed = document.getElementById(\"item_completed_checkbox\").checked;\n      //   this.setState({todoItem: temp});\n      //   this.setState({currentScreen: AppScreen.ITEM_SCREEN});\n      //}\n    };\n\n    this.addList = () => {\n      this.setState({\n        currentScreen: AppScreen.LIST_SCREEN\n      });\n      const newList = {\n        key: this.state.todoLists.length,\n        name: \"Unknown\",\n        owner: \"Unknown\",\n        items: []\n      };\n      this.setState({\n        todoLists: [...this.state.todoLists, newList]\n      });\n      this.setState({\n        currentList: newList\n      });\n      this.loadList(newList);\n    };\n\n    this.showDialog = () => {\n      document.getElementById(\"modal_content\").setAttribute(\"class\", \"slide_in\");\n      document.getElementById(\"modal_yes_no_dialog\").classList.add(\"is_visible\");\n    };\n\n    this.hideDialog = () => {\n      document.getElementById(\"modal_content\").setAttribute(\"class\", \"slide_out\");\n      setTimeout(function () {\n        document.getElementById(\"modal_yes_no_dialog\").classList.remove(\"is_visible\");\n      }, 1500);\n    };\n\n    this.deleteList = () => {\n      const index = this.state.todoLists.indexOf(this.state.currentList);\n      this.state.todoLists.splice(index, 1);\n      this.loadList();\n      this.goHome();\n    };\n\n    this.processSortItemsByTask = () => {\n      // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n      if (this.state.sortingCriteria === \"sort_by_task_increasing\") {\n        this.sortTasks(\"sort_by_task_decreasing\");\n      } // ALL OTHER CASES SORT BY INCREASING\n      else {\n          this.setState({\n            sortingCriteria: \"sort_by_task_increasing\"\n          });\n          this.sortTasks(\"sort_by_task_increasing\");\n        }\n    };\n\n    this.processSortItemsByDueDate = () => {\n      // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n      if (this.state.sortingCriteria === \"sort_by_due_date_increasing\") {\n        this.sortTasks(\"sort_by_due_date_decreasing\");\n      } // ALL OTHER CASES SORT BY INCREASING\n      else {\n          this.setState({\n            sortingCriteria: \"sort_by_due_date_increasing\"\n          });\n          this.sortTasks(\"sort_by_due_date_increasing\");\n        }\n    };\n\n    this.processSortItemsByStatus = () => {\n      // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n      if (this.state.sortingCriteria === \"sort_by_status_increasing\") {\n        this.sortTasks(\"sort_by_status_decreasing\");\n      } // ALL OTHER CASES SORT BY INCREASING\n      else {\n          this.setState({\n            sortingCriteria: \"sort_by_status_increasing\"\n          });\n          this.sortTasks(\"sort_by_status_increasing\");\n        }\n    };\n\n    this.sortTasks = sortingCriteria => {\n      this.setState({\n        sortingCriteria: sortingCriteria\n      }); //this.state.sortingCriteria = sortingCriteria;\n\n      this.state.currentList.items.sort(this.compare);\n      this.loadList(this.state.currentList);\n    };\n\n    this.compare = (item1, item2) => {\n      // IF IT'S A DECREASING CRITERIA SWAP THE ITEMS\n      if (this.state.sortingCriteria === \"sort_by_task_decreasing\" || this.state.sortingCriteria === \"sort_by_status_decreasing\" || this.state.sortingCriteria === \"sort_by_due_date_decreasing\") {\n        let temp = item1;\n        item1 = item2;\n        item2 = temp;\n      } // SORT BY ITEM DESCRIPTION\n\n\n      if (this.state.sortingCriteria === \"sort_by_task_increasing\" || this.state.sortingCriteria === \"sort_by_task_decreasing\") {\n        if (item1.description < item2.description) return -1;else if (item1.description > item2.description) return 1;else return 0;\n      } // SORT BY DUE DATE\n      else if (this.state.sortingCriteria === \"sort_by_due_date_increasing\" || this.state.sortingCriteria === \"sort_by_due_date_decreasing\") {\n          if (item1.due_date < item2.due_date) return -1;else if (item1.due_date > item2.due_date) return 1;else return 0;\n        } // SORT BY COMPLETED\n        else {\n            if (item1.completed < item2.completed) return -1;else if (item1.completed > item2.completed) return 1;else return 0;\n          }\n    };\n  }\n\n  // handleKeyPress = (e) => {\n  //   let button = String.fromCharCode(e.which).toLowerCase();\n  //   if (e.ctrlKey && button === 'z') {\n  //     this.tps.undoTransaction();\n  //     this.setState({currentScreen: AppScreen.LIST_SCREEN});\n  //   }\n  //   else if (e.ctrlKey && button === 'y') {\n  //     this.tps.doTransaction();\n  //     this.setState({currentScreen: AppScreen.LIST_SCREEN});\n  //   }\n  // }\n  render() {\n    switch (this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return React.createElement(HomeScreen, {\n          loadList: this.loadList.bind(this),\n          todoLists: this.state.todoLists,\n          addList: this.addList,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 261\n          },\n          __self: this\n        });\n\n      case AppScreen.LIST_SCREEN:\n        return React.createElement(ListScreen, {\n          goHome: this.goHome.bind(this),\n          todoList: this.state.currentList,\n          loadList: this.loadList,\n          showDialog: this.showDialog,\n          deleteList: this.deleteList,\n          hideDialog: this.hideDialog,\n          addList: this.addList,\n          editItem: this.editItem,\n          goItem: this.goItem,\n          processSortItemsByTask: this.processSortItemsByTask,\n          processSortItemsByStatus: this.processSortItemsByStatus,\n          processSortItemsByDueDate: this.processSortItemsByDueDate,\n          addMoveUpTransaction: this.addMoveUpTransaction,\n          addMoveDownTransaction: this.addMoveDownTransaction,\n          addNameChangeTransaction: this.addNameChangeTransaction,\n          addOwnerChangeTransaction: this.addOwnerChangeTransaction,\n          addListItemRemovalTransaction: this.addListItemRemovalTransaction //tps={this.tps}\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266\n          },\n          __self: this\n        });\n\n      case AppScreen.ITEM_SCREEN:\n        return React.createElement(ItemScreen //currentScreen={AppScreen.ITEM_SCREEN}\n        , {\n          todoItem: this.state.todoItem,\n          addItem: this.addItem,\n          cancelItemChanges: this.cancelItemChanges,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 294\n          },\n          __self: this\n        }, \"ERROR\");\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vash/Desktop/Pam/CSE316/todo_hw2/src/App.js"],"names":["React","Component","testTodoListData","HomeScreen","ItemScreen","ListScreen","jsTPS","MoveUpTransaction","MoveDownTransaction","ListNameChangeTransaction","ListOwnerChangeTransaction","ListItemRemovalTransaction","ListItemEditTransaction","AppScreen","HOME_SCREEN","LIST_SCREEN","ITEM_SCREEN","App","state","currentScreen","todoLists","currentList","todoItem","isEditingItem","sortingCriteria","goHome","setState","goItem","cancelItemChanges","loadList","todoListToLoad","console","log","editItem","currentItem","addItem","temp","description","document","getElementById","value","assigned_to","due_date","completed","checked","addItemEditTransaction","addList","newList","key","length","name","owner","items","showDialog","setAttribute","classList","add","hideDialog","setTimeout","remove","deleteList","index","indexOf","splice","processSortItemsByTask","sortTasks","processSortItemsByDueDate","processSortItemsByStatus","sort","compare","item1","item2","render","bind","addMoveUpTransaction","addMoveDownTransaction","addNameChangeTransaction","addOwnerChangeTransaction","addListItemRemovalTransaction"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport testTodoListData from './TestTodoListData.json'\nimport HomeScreen from './components/home_screen/HomeScreen'\nimport ItemScreen from './components/item_screen/ItemScreen'\nimport ListScreen from './components/list_screen/ListScreen'\nimport jsTPS from './jTPS/src/jtps/jsTPS'\nimport MoveUpTransaction from './jTPS/src/jtps/MoveUp_Transaction'\nimport MoveDownTransaction from './jTPS/src/jtps/MoveDown_Transaction'\nimport ListNameChangeTransaction from './jTPS/src/jtps/ListNameChange_Transaction'\nimport ListOwnerChangeTransaction from './jTPS/src/jtps/ListOwnerChange_Transaction'\nimport ListItemRemovalTransaction from './jTPS/src/jtps/ListItemRemoval_Transaction'\nimport ListItemEditTransaction from './jTPS/src/jtps/ListItemEdit_Transaction'\n\nconst AppScreen = {\n  HOME_SCREEN: \"HOME_SCREEN\",\n  LIST_SCREEN: \"LIST_SCREEN\",\n  ITEM_SCREEN: \"ITEM_SCREEN\"\n}\n\nclass App extends Component {\n  state = {\n    currentScreen: AppScreen.HOME_SCREEN,\n    todoLists: testTodoListData.todoLists,\n    currentList: null,\n    todoItem: null,\n    isEditingItem: false,\n    sortingCriteria: null,\n  }\n\n  // addMoveUpTransaction = (list, item) => {\n  //   this.tps.addTransaction(new MoveUpTransaction(list, item));\n  // }\n\n  // addMoveDownTransaction = (list, item) => {\n  //   this.tps.addTransaction(new MoveDownTransaction(list, item));\n  // }\n\n  // addNameChangeTransaction = (list, newName) => {\n  //   this.tps.addTransaction(new ListNameChangeTransaction(list, newName));\n  // }\n\n  // addOwnerChangeTransaction = (list, newOwner) => {\n  //   this.tps.addTransaction(new ListOwnerChangeTransaction(list, newOwner));\n  // }\n\n  // addListItemRemovalTransaction = (list, item, index) => {\n  //   this.tps.addTransaction(new ListItemRemovalTransaction(list, item, index));\n  // }\n  \n  // addItemEditTransaction = (list, currentItem, editOrNewItem, isEditingItem) => {\n  //   this.tps.addTransaction(new ListItemEditTransaction(list, currentItem, editOrNewItem, isEditingItem));\n  // }\n\n  goHome = () => {\n    this.setState({currentScreen: AppScreen.HOME_SCREEN});\n    this.setState({currentList: null});\n  }\n\n  goItem = () => {\n    this.setState( {currentScreen: AppScreen.ITEM_SCREEN});\n  }\n\n  cancelItemChanges = () => {\n    this.setState( {currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({todoItem: null});\n    this.setState({isEditingItem: false});\n  }\n  loadList = (todoListToLoad) => {\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    this.setState({currentList: todoListToLoad});\n    console.log(\"currentList: \" + this.state.currentList);\n    console.log(\"currentScreen: \" + this.state.currentScreen);\n  }\n  \n  editItem = (currentItem) => {\n    this.setState({isEditingItem: true});\n    this.setState({todoItem:currentItem});\n    this.setState({currentScreen: AppScreen.ITEM_SCREEN});\n  }\n  addItem = () => {\n    let temp = {\n      description: document.getElementById(\"item_description_textfield\").value,\n      assigned_to: document.getElementById(\"item_assigned_to_textfield\").value,\n      due_date: document.getElementById(\"item_due_date_picker\").value,\n      completed: document.getElementById(\"item_completed_checkbox\").checked,\n    }\n    if (temp.description === \"\")\n      temp.description = \"Unknown\";\n    if (temp.assigned_to === \"\")\n      temp.assigned_to = \"Unknown\";\n    this.addItemEditTransaction(this.state.currentList, this.state.todoItem, temp, this.state.isEditingItem);\n\n    this.loadList(this.state.currentList);\n    this.setState({todoItem: null});\n    this.setState({isEditingItem:false});\n    // if (this.state.isEditingItem === false) {\n      // const newItem = {\n      //   key: this.state.currentList.items.length,\n      //   description: document.getElementById(\"item_description_textfield\").value,\n      //   assigned_to: document.getElementById(\"item_assigned_to_textfield\").value,\n      //   due_date: document.getElementById(\"item_due_date_picker\").value,\n      //   completed: document.getElementById(\"item_completed_checkbox\").checked,\n      // // }\n      // if (newItem.description === \"\")\n      //   newItem.description = \"Unknown\";\n      // if (newItem.assigned_to === \"\")\n      //   newItem.assigned_to = \"Unknown\";\n      // this.state.currentList.items.push(newItem);\n    //}\n    // else {\n    //   let temp = this.state.todoItem;\n    //   if (temp.description !== document.getElementById(\"item_description_textfield\").value) {\n    //     if (document.getElementById(\"item_description_textfield\").value === \"\") {\n    //       temp.description = \"Unknown\";\n    //     }\n    //     else \n    //       temp.description = document.getElementById(\"item_description_textfield\").value;\n    //   }\n    //   if (temp.assigned_to !== document.getElementById(\"item_assigned_to_textfield\").value) {\n    //     if (document.getElementById(\"item_assigned_to_textfield\").value === \"\") {\n    //       temp.assigned_to = \"Unknown\";\n    //     }\n    //     else \n    //       temp.assigned_to = document.getElementById(\"item_assigned_to_textfield\").value;\n    //   }\n    //   if (temp.due_date !== document.getElementById(\"item_due_date_picker\").value) {\n    //     temp.due_date = document.getElementById(\"item_due_date_picker\").value;\n    //   }\n    //   if (temp.completed !== document.getElementById(\"item_completed_checkbox\").checked)\n    //     temp.completed = document.getElementById(\"item_completed_checkbox\").checked;\n\n    //   this.setState({todoItem: temp});\n    //   this.setState({currentScreen: AppScreen.ITEM_SCREEN});\n    //}\n  }\n  addList = () => {\n    this.setState({currentScreen: AppScreen.LIST_SCREEN});\n    const newList = {\n      key: this.state.todoLists.length,\n      name: \"Unknown\",\n      owner: \"Unknown\",\n      items: []\n    }\n    this.setState( { todoLists: [...this.state.todoLists, newList]});\n    this.setState( {currentList: newList});\n    this.loadList(newList);\n  }\n\n  showDialog = () => {\n    document.getElementById(\"modal_content\").setAttribute(\"class\",\"slide_in\");\n    document.getElementById(\"modal_yes_no_dialog\").classList.add(\"is_visible\");\n  }\n\n  hideDialog = () => {\n    document.getElementById(\"modal_content\").setAttribute(\"class\", \"slide_out\");\n    setTimeout(function() {\n        document.getElementById(\"modal_yes_no_dialog\").classList.remove(\"is_visible\");\n    },1500)\n  }\n\n  deleteList = () => {\n    const index = this.state.todoLists.indexOf(this.state.currentList);\n    this.state.todoLists.splice(index, 1);\n    this.loadList();\n    this.goHome();\n  }\n\n  processSortItemsByTask = () =>{\n    // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n    if (this.state.sortingCriteria===\"sort_by_task_increasing\") {\n        this.sortTasks(\"sort_by_task_decreasing\");\n    }\n    // ALL OTHER CASES SORT BY INCREASING\n    else {\n      this.setState({sortingCriteria:\"sort_by_task_increasing\"});\n      this.sortTasks(\"sort_by_task_increasing\");\n    }\n  }\n  processSortItemsByDueDate = () =>{\n    // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n    if (this.state.sortingCriteria===\"sort_by_due_date_increasing\") {\n        this.sortTasks(\"sort_by_due_date_decreasing\");\n    }\n    // ALL OTHER CASES SORT BY INCREASING\n    else {\n      this.setState({sortingCriteria:\"sort_by_due_date_increasing\"});\n      this.sortTasks(\"sort_by_due_date_increasing\");\n    }\n  }\n  processSortItemsByStatus = () =>{\n    // IF WE ARE CURRENTLY INCREASING BY TASK SWITCH TO DECREASING\n    if (this.state.sortingCriteria===\"sort_by_status_increasing\") {\n        this.sortTasks(\"sort_by_status_decreasing\");\n    }\n    // ALL OTHER CASES SORT BY INCREASING\n    else {\n      this.setState({sortingCriteria:\"sort_by_status_increasing\"});\n      this.sortTasks(\"sort_by_status_increasing\");\n    }\n  }\n  sortTasks = (sortingCriteria) => {\n      this.setState( {sortingCriteria: sortingCriteria});\n      //this.state.sortingCriteria = sortingCriteria;\n      this.state.currentList.items.sort(this.compare);\n      this.loadList(this.state.currentList);\n  }\n  compare = (item1, item2) => {\n    // IF IT'S A DECREASING CRITERIA SWAP THE ITEMS\n    if (this.state.sortingCriteria===\"sort_by_task_decreasing\"\n        || this.state.sortingCriteria===\"sort_by_status_decreasing\"\n        || this.state.sortingCriteria===\"sort_by_due_date_decreasing\") {\n        let temp = item1;\n        item1 = item2;\n        item2 = temp;\n    }\n    // SORT BY ITEM DESCRIPTION\n    if (this.state.sortingCriteria===\"sort_by_task_increasing\"\n        || this.state.sortingCriteria===\"sort_by_task_decreasing\") {\n        if (item1.description < item2.description)\n            return -1;\n        else if (item1.description > item2.description)\n            return 1;\n        else\n            return 0;\n    }\n    // SORT BY DUE DATE\n    else if (this.state.sortingCriteria===\"sort_by_due_date_increasing\"\n              || this.state.sortingCriteria===\"sort_by_due_date_decreasing\") {\n      if (item1.due_date < item2.due_date)\n        return -1;\n      else if (item1.due_date > item2.due_date)\n        return 1;\n      else\n        return 0;\n    }\n    // SORT BY COMPLETED\n    else {\n      if (item1.completed < item2.completed)\n        return -1;\n      else if (item1.completed > item2.completed)\n        return 1;\n      else\n        return 0;\n    }\n  }\n\n  // handleKeyPress = (e) => {\n  //   let button = String.fromCharCode(e.which).toLowerCase();\n  //   if (e.ctrlKey && button === 'z') {\n  //     this.tps.undoTransaction();\n  //     this.setState({currentScreen: AppScreen.LIST_SCREEN});\n  //   }\n  //   else if (e.ctrlKey && button === 'y') {\n  //     this.tps.doTransaction();\n  //     this.setState({currentScreen: AppScreen.LIST_SCREEN});\n  //   }\n  // }\n  render() {\n    switch(this.state.currentScreen) {\n      case AppScreen.HOME_SCREEN:\n        return <HomeScreen \n        loadList={this.loadList.bind(this)} \n        todoLists={this.state.todoLists} \n        addList={this.addList}/>;\n      case AppScreen.LIST_SCREEN:            \n        return <ListScreen\n          goHome={this.goHome.bind(this)}\n          todoList={this.state.currentList}\n          loadList={this.loadList} \n          showDialog={this.showDialog}\n          deleteList={this.deleteList}\n          hideDialog={this.hideDialog}\n          addList={this.addList}\n          editItem={this.editItem}\n          goItem={this.goItem}\n          processSortItemsByTask={this.processSortItemsByTask}\n          processSortItemsByStatus={this.processSortItemsByStatus}\n          processSortItemsByDueDate={this.processSortItemsByDueDate}\n          addMoveUpTransaction={this.addMoveUpTransaction}\n          addMoveDownTransaction={this.addMoveDownTransaction}\n          addNameChangeTransaction={this.addNameChangeTransaction}\n          addOwnerChangeTransaction={this.addOwnerChangeTransaction}\n          addListItemRemovalTransaction={this.addListItemRemovalTransaction}\n          //tps={this.tps}\n          />;\n      case AppScreen.ITEM_SCREEN:\n        return <ItemScreen \n        //currentScreen={AppScreen.ITEM_SCREEN}\n        todoItem={this.state.todoItem}\n        addItem={this.addItem}\n        cancelItemChanges={this.cancelItemChanges}\n        />;\n      default:\n        return <div>ERROR</div>;\n    }\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}